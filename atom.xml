<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://igorcferreira.dev/atom.xml" rel="self" type="application/atom+xml" /><link href="https://igorcferreira.dev/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-11-21T12:21:44+00:00</updated><id>https://igorcferreira.dev/atom.xml</id><title type="html">Igor Ferreira</title><subtitle>A simple blog, about my technical discoveries along the way. 
Here, I will mostly post things about Swift, iOS, and some other random dev tools
</subtitle><author><name>Igor Ferreira</name></author><entry><title type="html">Using DynamicNavigationDestinationLink</title><link href="https://igorcferreira.dev/ios/swiftui/2019/06/28/dynamicnavigationdestionationlink/" rel="alternate" type="text/html" title="Using DynamicNavigationDestinationLink" /><published>2019-06-28T00:00:00+00:00</published><updated>2019-06-28T00:00:00+00:00</updated><id>https://igorcferreira.dev/ios/swiftui/2019/06/28/dynamicnavigationdestionationlink</id><content type="html" xml:base="https://igorcferreira.dev/ios/swiftui/2019/06/28/dynamicnavigationdestionationlink/"><![CDATA[<p>Because of a <a href="https://twitter.com/thwittem/status/1143272885588549632">thread on Twitter</a>, I created this <a href="https://gist.github.com/igorcferreira/b302ea59830ce1a3ee2558fa996505ea">simple gist</a> with an attempt to simulate the use of DynamicNavigationDestinationLink to display a content fetched from an external source, it may be useful for you on trying to find a solution for your crashes.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>
<span class="kd">import</span> <span class="kt">PlaygroundSupport</span>

<span class="kd">struct</span> <span class="kt">RootView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">NavigationView</span> <span class="p">{</span>
            <span class="kt">MainView</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">MainView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">destination</span> <span class="o">=</span> <span class="kt">DynamicNavigationDestinationLink</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="p">\</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">state</span> <span class="k">in</span>
        <span class="kt">SecondaryView</span><span class="p">(</span><span class="nv">input</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">@State</span> <span class="k">var</span> <span class="nv">loading</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="n">loading</span> <span class="p">?</span> <span class="s">"Loading"</span> <span class="p">:</span> <span class="s">"Main View"</span><span class="p">)</span>
            <span class="k">if</span> <span class="o">!</span><span class="n">loading</span> <span class="p">{</span>
                <span class="kt">Button</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">navigate</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">Text</span><span class="p">(</span><span class="s">"Random number"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">navigate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">loading</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">let</span> <span class="nv">number</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="mi">0</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">loading</span> <span class="o">=</span> <span class="kc">false</span>
            <span class="k">self</span><span class="o">.</span><span class="n">destination</span><span class="o">.</span><span class="n">presentedData</span><span class="p">?</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">number</span><span class="se">)</span><span class="s">"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">SecondaryView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@State</span> <span class="k">var</span> <span class="nv">input</span><span class="p">:</span> <span class="kt">String</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">PlaygroundPage</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">liveView</span> <span class="o">=</span> <span class="kt">UIHostingController</span><span class="p">(</span><span class="nv">rootView</span><span class="p">:</span> <span class="kt">RootView</span><span class="p">())</span>
<span class="kt">PlaygroundPage</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">needsIndefiniteExecution</span> <span class="o">=</span> <span class="kc">true</span>
</code></pre></div></div>

<p>P.s.: It is as a Playground because I prefer this way to test/run SwiftUI on Mojave.</p>]]></content><author><name>Igor Ferreira</name></author><category term="iOS" /><category term="SwiftUI" /><summary type="html"><![CDATA[descriptions.post.dynamic_link]]></summary></entry></feed>